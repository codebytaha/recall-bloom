buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.6.0'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:2.1.0'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.buildDir = "../build"

// --- Force Kotlin to compile for JVM 11 everywhere ---
subprojects {
    afterEvaluate { project ->

        // Apply Kotlin compile settings
        project.tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
            kotlinOptions {
                jvmTarget = "11"
            }
        }

        // Try to set Kotlin toolchain (safe even if unsupported)
        try {
            project.plugins.withId("org.jetbrains.kotlin.android") {
                project.extensions.findByName("kotlin")?.with {
                    project.kotlin {
                        jvmToolchain(11)
                    }
                }
            }
            project.plugins.withId("org.jetbrains.kotlin.jvm") {
                project.extensions.findByName("kotlin")?.with {
                    project.kotlin {
                        jvmToolchain(11)
                    }
                }
            }
        } catch (ignored) {
            // no-op
        }

        // Android project settings
        if (project.plugins.hasPlugin("com.android.application") ||
                project.plugins.hasPlugin("com.android.library")) {
            project.android {
                compileSdkVersion 34
            }
        }

        if (project.hasProperty('android')) {
            project.android {
                if (namespace == null) {
                    namespace project.group
                }
            }
        }
    }
}

subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}

subprojects {
    project.evaluationDependsOn(":app")
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}

// Optional: load keystore if exists
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
